// Generated by gencpp from file dk_camera/DK_INFO.msg
// DO NOT EDIT!


#ifndef DK_CAMERA_MESSAGE_DK_INFO_H
#define DK_CAMERA_MESSAGE_DK_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dk_camera
{
template <class ContainerAllocator>
struct DK_INFO_
{
  typedef DK_INFO_<ContainerAllocator> Type;

  DK_INFO_()
    : data()
    , angle(0)
    , station_number(0)  {
    }
  DK_INFO_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , angle(0)
    , station_number(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  _data_type data;

   typedef int32_t _angle_type;
  _angle_type angle;

   typedef int32_t _station_number_type;
  _station_number_type station_number;





  typedef boost::shared_ptr< ::dk_camera::DK_INFO_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dk_camera::DK_INFO_<ContainerAllocator> const> ConstPtr;

}; // struct DK_INFO_

typedef ::dk_camera::DK_INFO_<std::allocator<void> > DK_INFO;

typedef boost::shared_ptr< ::dk_camera::DK_INFO > DK_INFOPtr;
typedef boost::shared_ptr< ::dk_camera::DK_INFO const> DK_INFOConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dk_camera::DK_INFO_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dk_camera::DK_INFO_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dk_camera::DK_INFO_<ContainerAllocator1> & lhs, const ::dk_camera::DK_INFO_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.angle == rhs.angle &&
    lhs.station_number == rhs.station_number;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dk_camera::DK_INFO_<ContainerAllocator1> & lhs, const ::dk_camera::DK_INFO_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dk_camera

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dk_camera::DK_INFO_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dk_camera::DK_INFO_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dk_camera::DK_INFO_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dk_camera::DK_INFO_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dk_camera::DK_INFO_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dk_camera::DK_INFO_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dk_camera::DK_INFO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a18b9ce4dd51326814ca565d3f1e4457";
  }

  static const char* value(const ::dk_camera::DK_INFO_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa18b9ce4dd513268ULL;
  static const uint64_t static_value2 = 0x14ca565d3f1e4457ULL;
};

template<class ContainerAllocator>
struct DataType< ::dk_camera::DK_INFO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dk_camera/DK_INFO";
  }

  static const char* value(const ::dk_camera::DK_INFO_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dk_camera::DK_INFO_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string data\n"
"int32 angle\n"
"int32 station_number\n"
;
  }

  static const char* value(const ::dk_camera::DK_INFO_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dk_camera::DK_INFO_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.angle);
      stream.next(m.station_number);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DK_INFO_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dk_camera::DK_INFO_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dk_camera::DK_INFO_<ContainerAllocator>& v)
  {
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data);
    s << indent << "angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angle);
    s << indent << "station_number: ";
    Printer<int32_t>::stream(s, indent + "  ", v.station_number);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DK_CAMERA_MESSAGE_DK_INFO_H
